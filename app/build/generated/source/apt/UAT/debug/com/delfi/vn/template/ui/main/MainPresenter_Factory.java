// Generated by Dagger (https://dagger.dev).
package com.delfi.vn.template.ui.main;

import com.delfi.vn.template.repositories.AppRepository;
import com.delfi.vn.template.repositories.GeneralRepo;
import com.delfi.vn.template.repositories.MainMenuRepository;
import com.delfi.vn.template.repositories.Menu11Repo;
import com.delfi.vn.template.repositories.UserRepository;
import com.delfi.vn.template.utils.rxscheduler.SchedulerListener;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainPresenter_Factory implements Factory<MainPresenter> {
  private final Provider<MainContract.View> viewProvider;

  private final Provider<SchedulerListener> schedulerListenerProvider;

  private final Provider<MainMenuRepository> mainMenuRepositoryProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<AppRepository> appRepositoryProvider;

  private final Provider<Menu11Repo> menu11RepoProvider;

  private final Provider<GeneralRepo> generalRepoProvider;

  public MainPresenter_Factory(Provider<MainContract.View> viewProvider,
      Provider<SchedulerListener> schedulerListenerProvider,
      Provider<MainMenuRepository> mainMenuRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<AppRepository> appRepositoryProvider, Provider<Menu11Repo> menu11RepoProvider,
      Provider<GeneralRepo> generalRepoProvider) {
    this.viewProvider = viewProvider;
    this.schedulerListenerProvider = schedulerListenerProvider;
    this.mainMenuRepositoryProvider = mainMenuRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.appRepositoryProvider = appRepositoryProvider;
    this.menu11RepoProvider = menu11RepoProvider;
    this.generalRepoProvider = generalRepoProvider;
  }

  @Override
  public MainPresenter get() {
    return new MainPresenter(viewProvider.get(), schedulerListenerProvider.get(), mainMenuRepositoryProvider.get(), userRepositoryProvider.get(), appRepositoryProvider.get(), menu11RepoProvider.get(), generalRepoProvider.get());
  }

  public static MainPresenter_Factory create(Provider<MainContract.View> viewProvider,
      Provider<SchedulerListener> schedulerListenerProvider,
      Provider<MainMenuRepository> mainMenuRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<AppRepository> appRepositoryProvider, Provider<Menu11Repo> menu11RepoProvider,
      Provider<GeneralRepo> generalRepoProvider) {
    return new MainPresenter_Factory(viewProvider, schedulerListenerProvider, mainMenuRepositoryProvider, userRepositoryProvider, appRepositoryProvider, menu11RepoProvider, generalRepoProvider);
  }

  public static MainPresenter newInstance(MainContract.View view,
      SchedulerListener schedulerListener, MainMenuRepository mainMenuRepository,
      UserRepository userRepository, AppRepository appRepository, Menu11Repo menu11Repo,
      GeneralRepo generalRepo) {
    return new MainPresenter(view, schedulerListener, mainMenuRepository, userRepository, appRepository, menu11Repo, generalRepo);
  }
}
