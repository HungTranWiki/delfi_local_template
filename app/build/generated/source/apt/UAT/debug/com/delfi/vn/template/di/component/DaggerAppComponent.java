// Generated by Dagger (https://dagger.dev).
package com.delfi.vn.template.di.component;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.support.v4.app.Fragment;
import com.delfi.core.sqlite.DbHelper;
import com.delfi.vn.template.MyApplication;
import com.delfi.vn.template.MyApplication_MembersInjector;
import com.delfi.vn.template.di.module.ActivityModule_ContributeAppIDSettingActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributeLoginActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributeMainActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributeMenu11DetailActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributeMenu11InputActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributeMenu21InputActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributeMenu22InputActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributePrinterIPSettingActivity;
import com.delfi.vn.template.di.module.ActivityModule_ContributeServerIPSettingActivity;
import com.delfi.vn.template.di.module.ApiModule;
import com.delfi.vn.template.di.module.ApiModule_ProvideApiServiceFactory;
import com.delfi.vn.template.di.module.ApiModule_ProvideAuthenticationInterceptorFactory;
import com.delfi.vn.template.di.module.ApiModule_ProvideCacheFactory;
import com.delfi.vn.template.di.module.ApiModule_ProvideGSonBuilderFactory;
import com.delfi.vn.template.di.module.ApiModule_ProvideNetworkInterceptorFactory;
import com.delfi.vn.template.di.module.ApiModule_ProvideOkHttpClientFactory;
import com.delfi.vn.template.di.module.ApiModule_ProvideRetrofitFactory;
import com.delfi.vn.template.di.module.AppModule;
import com.delfi.vn.template.di.module.AppModule_ProvideContextFactory;
import com.delfi.vn.template.di.module.AppModule_ProvideSchedulerListenerFactory;
import com.delfi.vn.template.di.module.DatabaseModule;
import com.delfi.vn.template.di.module.DatabaseModule_ProvideDatabaseNameFactory;
import com.delfi.vn.template.di.module.DatabaseModule_ProvideDatabaseVersionFactory;
import com.delfi.vn.template.di.module.DatabaseModule_ProvideDbHelperFactory;
import com.delfi.vn.template.repositories.AppRepositoryImpl;
import com.delfi.vn.template.repositories.AppRepositoryImpl_Factory;
import com.delfi.vn.template.repositories.GeneralRepoImpl;
import com.delfi.vn.template.repositories.LocalRepository;
import com.delfi.vn.template.repositories.MainMenuRepositoryImpl;
import com.delfi.vn.template.repositories.Menu11LocalRepoImpl;
import com.delfi.vn.template.repositories.Menu11RepoImpl;
import com.delfi.vn.template.repositories.ProductLocalRepoImpl;
import com.delfi.vn.template.repositories.Receipt11LocalRepoImpl;
import com.delfi.vn.template.repositories.Receipt11RepoImpl;
import com.delfi.vn.template.repositories.UserRepositoryImpl;
import com.delfi.vn.template.repositories.WarehouseLocalRepoImpl;
import com.delfi.vn.template.services.api.ApiRepositoryImpl;
import com.delfi.vn.template.services.api.ApiService;
import com.delfi.vn.template.services.api.AuthenticationInterceptor;
import com.delfi.vn.template.services.api.NetworkInterceptor;
import com.delfi.vn.template.ui.base.BaseActivity_MembersInjector;
import com.delfi.vn.template.ui.login.LoginActivity;
import com.delfi.vn.template.ui.login.LoginActivity_MembersInjector;
import com.delfi.vn.template.ui.login.LoginPresenter;
import com.delfi.vn.template.ui.main.MainActivity;
import com.delfi.vn.template.ui.main.MainActivity_MembersInjector;
import com.delfi.vn.template.ui.main.MainPresenter;
import com.delfi.vn.template.ui.menu11.detail.Menu11DetailActivity;
import com.delfi.vn.template.ui.menu11.detail.Menu11DetailActivity_MembersInjector;
import com.delfi.vn.template.ui.menu11.detail.Menu11DetailPresenter;
import com.delfi.vn.template.ui.menu11.input.Menu11InputActivity;
import com.delfi.vn.template.ui.menu11.input.Menu11InputActivity_MembersInjector;
import com.delfi.vn.template.ui.menu11.input.Menu11InputPresenter;
import com.delfi.vn.template.ui.menu21.Menu21InputActivity;
import com.delfi.vn.template.ui.menu21.Menu21InputActivity_MembersInjector;
import com.delfi.vn.template.ui.menu21.Menu21InputPresenter;
import com.delfi.vn.template.ui.menu22.Menu22InputActivity;
import com.delfi.vn.template.ui.menu22.Menu22InputActivity_MembersInjector;
import com.delfi.vn.template.ui.menu22.Menu22InputPresenter;
import com.delfi.vn.template.ui.settings.appid.AppIDSettingActivity;
import com.delfi.vn.template.ui.settings.appid.AppIDSettingActivity_MembersInjector;
import com.delfi.vn.template.ui.settings.appid.AppIDSettingPresenter;
import com.delfi.vn.template.ui.settings.printip.PrinterIPSettingActivity;
import com.delfi.vn.template.ui.settings.printip.PrinterIPSettingActivity_MembersInjector;
import com.delfi.vn.template.ui.settings.printip.PrinterIPSettingPresenter;
import com.delfi.vn.template.ui.settings.serverip.ServerIPSettingActivity;
import com.delfi.vn.template.ui.settings.serverip.ServerIPSettingActivity_MembersInjector;
import com.delfi.vn.template.ui.settings.serverip.ServerIPSettingPresenter;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.gson.GsonBuilder;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private Provider<ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory> loginActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeServerIPSettingActivity.ServerIPSettingActivitySubcomponent.Factory> serverIPSettingActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeAppIDSettingActivity.AppIDSettingActivitySubcomponent.Factory> appIDSettingActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributePrinterIPSettingActivity.PrinterIPSettingActivitySubcomponent.Factory> printerIPSettingActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMenu11InputActivity.Menu11InputActivitySubcomponent.Factory> menu11InputActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMenu11DetailActivity.Menu11DetailActivitySubcomponent.Factory> menu11DetailActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMenu21InputActivity.Menu21InputActivitySubcomponent.Factory> menu21InputActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMenu22InputActivity.Menu22InputActivitySubcomponent.Factory> menu22InputActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<GsonBuilder> provideGSonBuilderProvider;

  private Provider<Cache> provideCacheProvider;

  private Provider<AppRepositoryImpl> appRepositoryImplProvider;

  private Provider<AuthenticationInterceptor> provideAuthenticationInterceptorProvider;

  private Provider<NetworkInterceptor> provideNetworkInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<String> provideDatabaseNameProvider;

  private Provider<Integer> provideDatabaseVersionProvider;

  private Provider<DbHelper> provideDbHelperProvider;

  private DaggerAppComponent(AppModule appModuleParam, ApiModule apiModuleParam,
      DatabaseModule databaseModuleParam, Application applicationParam, AppModule appModule2,
      ApiModule apiModule2, DatabaseModule databaseModule2) {
    this.appModule = appModuleParam;
    initialize(appModuleParam, apiModuleParam, databaseModuleParam, applicationParam, appModule2, apiModule2, databaseModule2);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builder().put(LoginActivity.class, (Provider) loginActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(ServerIPSettingActivity.class, (Provider) serverIPSettingActivitySubcomponentFactoryProvider).put(AppIDSettingActivity.class, (Provider) appIDSettingActivitySubcomponentFactoryProvider).put(PrinterIPSettingActivity.class, (Provider) printerIPSettingActivitySubcomponentFactoryProvider).put(Menu11InputActivity.class, (Provider) menu11InputActivitySubcomponentFactoryProvider).put(Menu11DetailActivity.class, (Provider) menu11DetailActivitySubcomponentFactoryProvider).put(Menu21InputActivity.class, (Provider) menu21InputActivitySubcomponentFactoryProvider).put(Menu22InputActivity.class, (Provider) menu22InputActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

  private AppRepositoryImpl getAppRepositoryImpl() {
    return new AppRepositoryImpl(provideContextProvider.get());}

  private ApiRepositoryImpl getApiRepositoryImpl() {
    return new ApiRepositoryImpl(provideApiServiceProvider.get(), getAppRepositoryImpl());}

  private UserRepositoryImpl getUserRepositoryImpl() {
    return new UserRepositoryImpl(getAppRepositoryImpl(), getApiRepositoryImpl());}

  private MainMenuRepositoryImpl getMainMenuRepositoryImpl() {
    return new MainMenuRepositoryImpl(getAppRepositoryImpl());}

  private LocalRepository getLocalRepository() {
    return new LocalRepository(provideDbHelperProvider.get());}

  private Menu11LocalRepoImpl getMenu11LocalRepoImpl() {
    return new Menu11LocalRepoImpl(getLocalRepository());}

  private Menu11RepoImpl getMenu11RepoImpl() {
    return new Menu11RepoImpl(provideContextProvider.get(), getApiRepositoryImpl(), getMenu11LocalRepoImpl());}

  private WarehouseLocalRepoImpl getWarehouseLocalRepoImpl() {
    return new WarehouseLocalRepoImpl(getLocalRepository());}

  private ProductLocalRepoImpl getProductLocalRepoImpl() {
    return new ProductLocalRepoImpl(getLocalRepository());}

  private GeneralRepoImpl getGeneralRepoImpl() {
    return new GeneralRepoImpl(getApiRepositoryImpl(), getAppRepositoryImpl(), getWarehouseLocalRepoImpl(), getProductLocalRepoImpl());}

  private Receipt11LocalRepoImpl getReceipt11LocalRepoImpl() {
    return new Receipt11LocalRepoImpl(getLocalRepository());}

  private Receipt11RepoImpl getReceipt11RepoImpl() {
    return new Receipt11RepoImpl(getApiRepositoryImpl(), getReceipt11LocalRepoImpl());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final ApiModule apiModuleParam,
      final DatabaseModule databaseModuleParam, final Application applicationParam,
      final AppModule appModule2, final ApiModule apiModule2,
      final DatabaseModule databaseModule2) {
    this.loginActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory get() {
        return new LoginActivitySubcomponentFactory();}
    };
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.serverIPSettingActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeServerIPSettingActivity.ServerIPSettingActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeServerIPSettingActivity.ServerIPSettingActivitySubcomponent.Factory get(
          ) {
        return new ServerIPSettingActivitySubcomponentFactory();}
    };
    this.appIDSettingActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeAppIDSettingActivity.AppIDSettingActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeAppIDSettingActivity.AppIDSettingActivitySubcomponent.Factory get(
          ) {
        return new AppIDSettingActivitySubcomponentFactory();}
    };
    this.printerIPSettingActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributePrinterIPSettingActivity.PrinterIPSettingActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributePrinterIPSettingActivity.PrinterIPSettingActivitySubcomponent.Factory get(
          ) {
        return new PrinterIPSettingActivitySubcomponentFactory();}
    };
    this.menu11InputActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMenu11InputActivity.Menu11InputActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMenu11InputActivity.Menu11InputActivitySubcomponent.Factory get(
          ) {
        return new Menu11InputActivitySubcomponentFactory();}
    };
    this.menu11DetailActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMenu11DetailActivity.Menu11DetailActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMenu11DetailActivity.Menu11DetailActivitySubcomponent.Factory get(
          ) {
        return new Menu11DetailActivitySubcomponentFactory();}
    };
    this.menu21InputActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMenu21InputActivity.Menu21InputActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMenu21InputActivity.Menu21InputActivitySubcomponent.Factory get(
          ) {
        return new Menu21InputActivitySubcomponentFactory();}
    };
    this.menu22InputActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMenu22InputActivity.Menu22InputActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMenu22InputActivity.Menu22InputActivitySubcomponent.Factory get(
          ) {
        return new Menu22InputActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = DoubleCheck.provider(AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider));
    this.provideGSonBuilderProvider = DoubleCheck.provider(ApiModule_ProvideGSonBuilderFactory.create(apiModuleParam));
    this.provideCacheProvider = DoubleCheck.provider(ApiModule_ProvideCacheFactory.create(apiModuleParam, applicationProvider));
    this.appRepositoryImplProvider = AppRepositoryImpl_Factory.create(provideContextProvider);
    this.provideAuthenticationInterceptorProvider = DoubleCheck.provider(ApiModule_ProvideAuthenticationInterceptorFactory.create(apiModuleParam, (Provider) appRepositoryImplProvider));
    this.provideNetworkInterceptorProvider = DoubleCheck.provider(ApiModule_ProvideNetworkInterceptorFactory.create(apiModuleParam, provideContextProvider));
    this.provideOkHttpClientProvider = DoubleCheck.provider(ApiModule_ProvideOkHttpClientFactory.create(apiModuleParam, provideCacheProvider, provideAuthenticationInterceptorProvider, provideNetworkInterceptorProvider));
    this.provideRetrofitProvider = DoubleCheck.provider(ApiModule_ProvideRetrofitFactory.create(apiModuleParam, provideContextProvider, provideGSonBuilderProvider, provideOkHttpClientProvider));
    this.provideApiServiceProvider = DoubleCheck.provider(ApiModule_ProvideApiServiceFactory.create(apiModuleParam, provideRetrofitProvider));
    this.provideDatabaseNameProvider = DatabaseModule_ProvideDatabaseNameFactory.create(databaseModuleParam);
    this.provideDatabaseVersionProvider = DatabaseModule_ProvideDatabaseVersionFactory.create(databaseModuleParam);
    this.provideDbHelperProvider = DoubleCheck.provider(DatabaseModule_ProvideDbHelperFactory.create(databaseModuleParam, provideContextProvider, provideDatabaseNameProvider, provideDatabaseVersionProvider));
  }

  @Override
  public void inject(MyApplication application) {
    injectMyApplication(application);}

  @Override
  public void inject(AppModule appModule) {
  }

  @CanIgnoreReturnValue
  private MyApplication injectMyApplication(MyApplication instance) {
    MyApplication_MembersInjector.injectActivityDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfActivity());
    MyApplication_MembersInjector.injectFragmentDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfFragment());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    private AppModule appModule;

    private ApiModule apiModule;

    private DatabaseModule databaseModule;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder appModule(AppModule module) {
      this.appModule = Preconditions.checkNotNull(module);
      return this;
    }

    @Override
    public Builder apiModule(ApiModule module) {
      this.apiModule = Preconditions.checkNotNull(module);
      return this;
    }

    @Override
    public Builder databaseModule(DatabaseModule module) {
      this.databaseModule = Preconditions.checkNotNull(module);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      Preconditions.checkBuilderRequirement(apiModule, ApiModule.class);
      Preconditions.checkBuilderRequirement(databaseModule, DatabaseModule.class);
      return new DaggerAppComponent(new AppModule(), new ApiModule(), new DatabaseModule(), application, appModule, apiModule, databaseModule);
    }
  }

  private final class LoginActivitySubcomponentFactory implements ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent create(
        LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl implements ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent {
    private final LoginActivity arg0;

    private LoginActivitySubcomponentImpl(LoginActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private LoginPresenter getLoginPresenter() {
      return new LoginPresenter(arg0, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule), DaggerAppComponent.this.getUserRepositoryImpl(), DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);}

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      LoginActivity_MembersInjector.injectPresenter(instance, getLoginPresenter());
      return instance;
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private final MainActivity arg0;

    private MainActivitySubcomponentImpl(MainActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private MainPresenter getMainPresenter() {
      return new MainPresenter(arg0, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule), DaggerAppComponent.this.getMainMenuRepositoryImpl(), DaggerAppComponent.this.getUserRepositoryImpl(), DaggerAppComponent.this.getAppRepositoryImpl(), DaggerAppComponent.this.getMenu11RepoImpl(), DaggerAppComponent.this.getGeneralRepoImpl());}

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      MainActivity_MembersInjector.injectPresenter(instance, getMainPresenter());
      return instance;
    }
  }

  private final class ServerIPSettingActivitySubcomponentFactory implements ActivityModule_ContributeServerIPSettingActivity.ServerIPSettingActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeServerIPSettingActivity.ServerIPSettingActivitySubcomponent create(
        ServerIPSettingActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ServerIPSettingActivitySubcomponentImpl(arg0);
    }
  }

  private final class ServerIPSettingActivitySubcomponentImpl implements ActivityModule_ContributeServerIPSettingActivity.ServerIPSettingActivitySubcomponent {
    private final ServerIPSettingActivity arg0;

    private ServerIPSettingActivitySubcomponentImpl(ServerIPSettingActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private ServerIPSettingPresenter getServerIPSettingPresenter() {
      return new ServerIPSettingPresenter(arg0, DaggerAppComponent.this.getApiRepositoryImpl(), DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(ServerIPSettingActivity arg0) {
      injectServerIPSettingActivity(arg0);}

    @CanIgnoreReturnValue
    private ServerIPSettingActivity injectServerIPSettingActivity(
        ServerIPSettingActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      ServerIPSettingActivity_MembersInjector.injectPresenter(instance, getServerIPSettingPresenter());
      return instance;
    }
  }

  private final class AppIDSettingActivitySubcomponentFactory implements ActivityModule_ContributeAppIDSettingActivity.AppIDSettingActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeAppIDSettingActivity.AppIDSettingActivitySubcomponent create(
        AppIDSettingActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AppIDSettingActivitySubcomponentImpl(arg0);
    }
  }

  private final class AppIDSettingActivitySubcomponentImpl implements ActivityModule_ContributeAppIDSettingActivity.AppIDSettingActivitySubcomponent {
    private final AppIDSettingActivity arg0;

    private AppIDSettingActivitySubcomponentImpl(AppIDSettingActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private AppIDSettingPresenter getAppIDSettingPresenter() {
      return new AppIDSettingPresenter(arg0, DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(AppIDSettingActivity arg0) {
      injectAppIDSettingActivity(arg0);}

    @CanIgnoreReturnValue
    private AppIDSettingActivity injectAppIDSettingActivity(AppIDSettingActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      AppIDSettingActivity_MembersInjector.injectPresenter(instance, getAppIDSettingPresenter());
      return instance;
    }
  }

  private final class PrinterIPSettingActivitySubcomponentFactory implements ActivityModule_ContributePrinterIPSettingActivity.PrinterIPSettingActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributePrinterIPSettingActivity.PrinterIPSettingActivitySubcomponent create(
        PrinterIPSettingActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new PrinterIPSettingActivitySubcomponentImpl(arg0);
    }
  }

  private final class PrinterIPSettingActivitySubcomponentImpl implements ActivityModule_ContributePrinterIPSettingActivity.PrinterIPSettingActivitySubcomponent {
    private final PrinterIPSettingActivity arg0;

    private PrinterIPSettingActivitySubcomponentImpl(PrinterIPSettingActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private PrinterIPSettingPresenter getPrinterIPSettingPresenter() {
      return new PrinterIPSettingPresenter(arg0, DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(PrinterIPSettingActivity arg0) {
      injectPrinterIPSettingActivity(arg0);}

    @CanIgnoreReturnValue
    private PrinterIPSettingActivity injectPrinterIPSettingActivity(
        PrinterIPSettingActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      PrinterIPSettingActivity_MembersInjector.injectPresenter(instance, getPrinterIPSettingPresenter());
      return instance;
    }
  }

  private final class Menu11InputActivitySubcomponentFactory implements ActivityModule_ContributeMenu11InputActivity.Menu11InputActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMenu11InputActivity.Menu11InputActivitySubcomponent create(
        Menu11InputActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new Menu11InputActivitySubcomponentImpl(arg0);
    }
  }

  private final class Menu11InputActivitySubcomponentImpl implements ActivityModule_ContributeMenu11InputActivity.Menu11InputActivitySubcomponent {
    private final Menu11InputActivity arg0;

    private Menu11InputActivitySubcomponentImpl(Menu11InputActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private Menu11InputPresenter getMenu11InputPresenter() {
      return new Menu11InputPresenter(arg0, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule), DaggerAppComponent.this.getGeneralRepoImpl(), DaggerAppComponent.this.getMenu11RepoImpl(), DaggerAppComponent.this.getReceipt11RepoImpl(), DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(Menu11InputActivity arg0) {
      injectMenu11InputActivity(arg0);}

    @CanIgnoreReturnValue
    private Menu11InputActivity injectMenu11InputActivity(Menu11InputActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      Menu11InputActivity_MembersInjector.injectPresenter(instance, getMenu11InputPresenter());
      return instance;
    }
  }

  private final class Menu11DetailActivitySubcomponentFactory implements ActivityModule_ContributeMenu11DetailActivity.Menu11DetailActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMenu11DetailActivity.Menu11DetailActivitySubcomponent create(
        Menu11DetailActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new Menu11DetailActivitySubcomponentImpl(arg0);
    }
  }

  private final class Menu11DetailActivitySubcomponentImpl implements ActivityModule_ContributeMenu11DetailActivity.Menu11DetailActivitySubcomponent {
    private final Menu11DetailActivity arg0;

    private Menu11DetailActivitySubcomponentImpl(Menu11DetailActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private Menu11DetailPresenter getMenu11DetailPresenter() {
      return new Menu11DetailPresenter(arg0, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule), DaggerAppComponent.this.getMenu11RepoImpl(), DaggerAppComponent.this.getReceipt11RepoImpl(), DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(Menu11DetailActivity arg0) {
      injectMenu11DetailActivity(arg0);}

    @CanIgnoreReturnValue
    private Menu11DetailActivity injectMenu11DetailActivity(Menu11DetailActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      Menu11DetailActivity_MembersInjector.injectPresenter(instance, getMenu11DetailPresenter());
      return instance;
    }
  }

  private final class Menu21InputActivitySubcomponentFactory implements ActivityModule_ContributeMenu21InputActivity.Menu21InputActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMenu21InputActivity.Menu21InputActivitySubcomponent create(
        Menu21InputActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new Menu21InputActivitySubcomponentImpl(arg0);
    }
  }

  private final class Menu21InputActivitySubcomponentImpl implements ActivityModule_ContributeMenu21InputActivity.Menu21InputActivitySubcomponent {
    private final Menu21InputActivity arg0;

    private Menu21InputActivitySubcomponentImpl(Menu21InputActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private Menu21InputPresenter getMenu21InputPresenter() {
      return new Menu21InputPresenter(arg0, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule), DaggerAppComponent.this.getReceipt11RepoImpl(), DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(Menu21InputActivity arg0) {
      injectMenu21InputActivity(arg0);}

    @CanIgnoreReturnValue
    private Menu21InputActivity injectMenu21InputActivity(Menu21InputActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      Menu21InputActivity_MembersInjector.injectPresenter(instance, getMenu21InputPresenter());
      return instance;
    }
  }

  private final class Menu22InputActivitySubcomponentFactory implements ActivityModule_ContributeMenu22InputActivity.Menu22InputActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMenu22InputActivity.Menu22InputActivitySubcomponent create(
        Menu22InputActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new Menu22InputActivitySubcomponentImpl(arg0);
    }
  }

  private final class Menu22InputActivitySubcomponentImpl implements ActivityModule_ContributeMenu22InputActivity.Menu22InputActivitySubcomponent {
    private final Menu22InputActivity arg0;

    private Menu22InputActivitySubcomponentImpl(Menu22InputActivity arg0Param) {
      this.arg0 = arg0Param;
    }

    private Menu22InputPresenter getMenu22InputPresenter() {
      return new Menu22InputPresenter(arg0, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule), DaggerAppComponent.this.getReceipt11RepoImpl(), DaggerAppComponent.this.getAppRepositoryImpl());}

    @Override
    public void inject(Menu22InputActivity arg0) {
      injectMenu22InputActivity(arg0);}

    @CanIgnoreReturnValue
    private Menu22InputActivity injectMenu22InputActivity(Menu22InputActivity instance) {
      BaseActivity_MembersInjector.injectSchedulerListener(instance, AppModule_ProvideSchedulerListenerFactory.provideSchedulerListener(DaggerAppComponent.this.appModule));
      Menu22InputActivity_MembersInjector.injectPresenter(instance, getMenu22InputPresenter());
      return instance;
    }
  }
}
