// Generated by Dagger (https://dagger.dev).
package com.delfi.vn.template.di.module;

import android.content.Context;
import com.delfi.vn.template.services.api.NetworkInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideNetworkInterceptorFactory implements Factory<NetworkInterceptor> {
  private final ApiModule module;

  private final Provider<Context> contextProvider;

  public ApiModule_ProvideNetworkInterceptorFactory(ApiModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public NetworkInterceptor get() {
    return provideNetworkInterceptor(module, contextProvider.get());
  }

  public static ApiModule_ProvideNetworkInterceptorFactory create(ApiModule module,
      Provider<Context> contextProvider) {
    return new ApiModule_ProvideNetworkInterceptorFactory(module, contextProvider);
  }

  public static NetworkInterceptor provideNetworkInterceptor(ApiModule instance, Context context) {
    return Preconditions.checkNotNull(instance.provideNetworkInterceptor(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
