// Generated by Dagger (https://dagger.dev).
package com.delfi.vn.template.services.api;

import com.delfi.vn.template.repositories.AppRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiRepositoryImpl_Factory implements Factory<ApiRepositoryImpl> {
  private final Provider<ApiService> apiServiceProvider;

  private final Provider<AppRepository> appRepositoryProvider;

  public ApiRepositoryImpl_Factory(Provider<ApiService> apiServiceProvider,
      Provider<AppRepository> appRepositoryProvider) {
    this.apiServiceProvider = apiServiceProvider;
    this.appRepositoryProvider = appRepositoryProvider;
  }

  @Override
  public ApiRepositoryImpl get() {
    return new ApiRepositoryImpl(apiServiceProvider.get(), appRepositoryProvider.get());
  }

  public static ApiRepositoryImpl_Factory create(Provider<ApiService> apiServiceProvider,
      Provider<AppRepository> appRepositoryProvider) {
    return new ApiRepositoryImpl_Factory(apiServiceProvider, appRepositoryProvider);
  }

  public static ApiRepositoryImpl newInstance(ApiService apiService, AppRepository appRepository) {
    return new ApiRepositoryImpl(apiService, appRepository);
  }
}
