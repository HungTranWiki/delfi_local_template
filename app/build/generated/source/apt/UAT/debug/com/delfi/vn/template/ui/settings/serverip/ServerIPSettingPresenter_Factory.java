// Generated by Dagger (https://dagger.dev).
package com.delfi.vn.template.ui.settings.serverip;

import com.delfi.vn.template.repositories.AppRepository;
import com.delfi.vn.template.services.api.ApiRepositoryImpl;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServerIPSettingPresenter_Factory implements Factory<ServerIPSettingPresenter> {
  private final Provider<ServerIPSettingContract.View> viewProvider;

  private final Provider<ApiRepositoryImpl> apiRepositoryImplProvider;

  private final Provider<AppRepository> appRepositoryProvider;

  public ServerIPSettingPresenter_Factory(Provider<ServerIPSettingContract.View> viewProvider,
      Provider<ApiRepositoryImpl> apiRepositoryImplProvider,
      Provider<AppRepository> appRepositoryProvider) {
    this.viewProvider = viewProvider;
    this.apiRepositoryImplProvider = apiRepositoryImplProvider;
    this.appRepositoryProvider = appRepositoryProvider;
  }

  @Override
  public ServerIPSettingPresenter get() {
    return new ServerIPSettingPresenter(viewProvider.get(), apiRepositoryImplProvider.get(), appRepositoryProvider.get());
  }

  public static ServerIPSettingPresenter_Factory create(
      Provider<ServerIPSettingContract.View> viewProvider,
      Provider<ApiRepositoryImpl> apiRepositoryImplProvider,
      Provider<AppRepository> appRepositoryProvider) {
    return new ServerIPSettingPresenter_Factory(viewProvider, apiRepositoryImplProvider, appRepositoryProvider);
  }

  public static ServerIPSettingPresenter newInstance(ServerIPSettingContract.View view,
      ApiRepositoryImpl apiRepositoryImpl, AppRepository appRepository) {
    return new ServerIPSettingPresenter(view, apiRepositoryImpl, appRepository);
  }
}
