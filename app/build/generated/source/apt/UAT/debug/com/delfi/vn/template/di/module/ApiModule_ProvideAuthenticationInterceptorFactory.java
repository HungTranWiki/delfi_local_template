// Generated by Dagger (https://dagger.dev).
package com.delfi.vn.template.di.module;

import com.delfi.vn.template.repositories.AppRepository;
import com.delfi.vn.template.services.api.AuthenticationInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideAuthenticationInterceptorFactory implements Factory<AuthenticationInterceptor> {
  private final ApiModule module;

  private final Provider<AppRepository> appRepositoryProvider;

  public ApiModule_ProvideAuthenticationInterceptorFactory(ApiModule module,
      Provider<AppRepository> appRepositoryProvider) {
    this.module = module;
    this.appRepositoryProvider = appRepositoryProvider;
  }

  @Override
  public AuthenticationInterceptor get() {
    return provideAuthenticationInterceptor(module, appRepositoryProvider.get());
  }

  public static ApiModule_ProvideAuthenticationInterceptorFactory create(ApiModule module,
      Provider<AppRepository> appRepositoryProvider) {
    return new ApiModule_ProvideAuthenticationInterceptorFactory(module, appRepositoryProvider);
  }

  public static AuthenticationInterceptor provideAuthenticationInterceptor(ApiModule instance,
      AppRepository appRepository) {
    return Preconditions.checkNotNull(instance.provideAuthenticationInterceptor(appRepository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
